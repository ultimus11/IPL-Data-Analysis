# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aSmnHLUay0Km9Tj8JUoHRGxT5rkT-qoL
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import math
from collections import Counter

df1 = pd.read_csv('/content/drive/MyDrive/iplData/IPL Ball-by-Ball 2008-2020.csv',parse_dates = True)

print(df1.head(10))

df = pd.read_csv('/content/drive/MyDrive/iplData/IPL Matches 2008-2020.csv',parse_dates = True)

print(df.head(10))

#Mean
x = df1["batsman_runs"].mean()
print(int(x))
#df["batsman_runs"].fillna(x, inplace = True)

#Median
x = df1["batsman_runs"].median()
print(x)
#df["batsman_runs"].fillna(x, inplace = True)

#Mode
x = df1["batsman_runs"].mode()[0]
print(x)
#df["batsman_runs"].fillna(x, inplace = True)

df.loc[:,["date","team1","team2"]]

df = df.drop(columns = ['id','method'])

nans_indices = df.columns[df.isna().any()].tolist()

df.loc[:,nans_indices]

df['city'] = df['city'].fillna('Unkown City')

df['winner'] = df['winner'].fillna('No Result')

df['result'] = df['result'].fillna('No Result')

df['player_of_match'] = df['player_of_match'].fillna('No Result')

df['result_margin'] = df['result_margin'].fillna(0)

df = df.drop(columns = ['eliminator'])

df = df.replace(['Delhi Daredevils'],'Delhi Capitals')

df = df.replace(['Rising Pune Supergiants'],'Rising Pune Supergiant')

df = df.replace(['Deccan Chargers'],'Sunrisers Hyderabad')

df['winner'].unique()

df.loc[:,["venue","toss_winner"]]

winner = sns.catplot(kind = 'count', x = 'toss_winner', data = df, color  = '#00afb9')

## Customising the Plot ##

sns.set_style('dark')

winner.fig.set_size_inches([28,6])

plt.title("Number of Tosses Won by Each Franchise", fontsize = 20, color  = '#0081a7')

plt.ylabel('Wins',color = '#fb5607', fontsize = 20)

plt.xlabel('IPL Franchises', color = '#fb5607', fontsize = 20)

plt.xticks(rotation = 90, color = '#6d597a', fontsize = 20)

plt.yticks(color = '#6d597a')

plt.show()

plt.clf()

winner = sns.catplot(kind = 'count', x = df['venue'].unique(), data = df, color  = '#00afb9')

## Customising the Plot ##

sns.set_style('dark')

winner.fig.set_size_inches([28,6])

plt.title("Unique Stadiums", fontsize = 20, color  = '#0081a7')

plt.ylabel('',color = '#fb5607', fontsize = 20)

plt.xlabel('IPL Stadiums', color = '#fb5607', fontsize = 20)

plt.xticks(rotation = 90, color = '#6d597a', fontsize = 20)

plt.yticks(color = '#6d597a')

plt.show()

plt.clf()

x1=df["venue"].tolist()
unique_x= df['venue'].unique().tolist()
y1=df["toss_winner"].tolist()
unique_y= df["toss_winner"].unique().tolist()

list_count= np.zeros((len(unique_y),), dtype=int).tolist()
dict={}
for venue in unique_x:
  dict[venue]=[]
for idx, venue in enumerate(x1):
  dict[venue].append(y1[idx])

graph_x=[]
graph_y=[]
for venue in unique_x:
  data_v = dict[venue]
  x = unique_y[0]
  d = Counter(data_v) 
  print('{} had won toss at {} for {} times'.format(x, venue, d[x]))
  #adding x and y axis for RCB for graph/visualization
  graph_x.append(venue)
  graph_y.append(d[x])
  #print(venue,data_v)
print(graph_x)
print(graph_y)

x = unique_y[0]
d = Counter(data_v) 
print('{} has occurred {} times'.format(x, d[x]))
data_v

f, ax = plt.subplots(figsize=(18,5)) # set the size that you'd like (width, height)
plt.bar(graph_x, graph_y, label = 'first bar')
plt.xticks(rotation = 90, fontsize = 10,color = '#6d597a')

plt.yticks(color = '#6d597a')

plt.ylabel("Number of times toss won by RCB", fontsize = 10, color = '#fb5607')

plt.xlabel("Venue", fontsize = 10, color = '#fb5607')

plt.title("Toss won by RCB at different venues ", color  = '#0081a7', fontsize = 10)

#plt.axhline(np.mean(percentage_of_wins), label = 'Mean', linestyle = '--', color = '#0077b6')

plt.legend(fontsize = 14)

plt.show()

graph_x=[]
graph_y=[]
for venue in unique_x:
  data_v = dict[venue]
  x = unique_y[3]
  d = Counter(data_v) 
  print('{} had won toss at {} for {} times'.format(x, venue, d[x]))
  #adding x and y axis for MI for graph/visualization
  graph_x.append(venue)
  graph_y.append(d[x])
  #print(venue,data_v)
print(graph_x)
print(graph_y)

x = unique_y[3]
d = Counter(data_v) 
print('{} has occurred {} times'.format(x, d[x]))
data_v

f, ax = plt.subplots(figsize=(18,5)) # set the size that you'd like (width, height)
plt.bar(graph_x, graph_y, label = 'first bar')
plt.xticks(rotation = 90, fontsize = 10,color = '#6d597a')

plt.yticks(color = '#6d597a')

plt.ylabel("Number of times toss won by MI", fontsize = 10, color = '#fb5607')

plt.xlabel("Venue", fontsize = 10, color = '#fb5607')

plt.title("Toss won by MI at different venues ", color  = '#0081a7', fontsize = 10)

#plt.axhline(np.mean(percentage_of_wins), label = 'Mean', linestyle = '--', color = '#0077b6')

plt.legend(fontsize = 14)

plt.show()

venue_rcb_mi=[]
toss_winner_rcb_mi=[]
toss_decision_rcb_mi=[]
result_rcb_mi=[]
result_margin_rcb_mi=[]
uppires_rcb_mi=[]
row_numbers_rcb_mi=[]
teams_for_todays_match=['Royal Challengers Bangalore','Mumbai Indians']
team1_rcb_mi=df["team1"].tolist()
team2_rcb_mi=df["team2"].tolist()
for idx,team in enumerate(team1_rcb_mi):
  for idx1,teamm in enumerate(team2_rcb_mi):
    if idx==idx1:
      if team in teams_for_todays_match:
        if teamm in teams_for_todays_match:
          row_numbers_rcb_mi.append(idx)
print(len(row_numbers_rcb_mi))
row_numbers_rcb_mi

df_rcb_mi=df[(df["team1"].isin(teams_for_todays_match))&(df["team2"].isin(teams_for_todays_match))]
print(df_rcb_mi.head())

df_todays_venue=df_rcb_mi[(df_rcb_mi["venue"]=="MA Chidambaram Stadium, Chepauk")]
df_todays_venue

# df_todays_venue1=df_rcb_mi[(df_rcb_mi["umpire1"]=="MA Chidambaram Stadium, Chepauk")]
df["umpire1"].unique()

todays_umpires=["C Shamshuddin","UV Gandhe","KN Ananthapadmanabhan","Nitin Menon"]
df_todays_umpire=df_rcb_mi[(df_rcb_mi["umpire1"].isin(todays_umpires))&(df_rcb_mi["umpire2"].isin(todays_umpires))]
df_todays_umpire

df_rcb_mi["toss_winner"].value_counts()

df_todays_mumbai_toss=df_rcb_mi[(df_rcb_mi["toss_winner"]=="Mumbai Indians")]
df_todays_rcb_toss=df_rcb_mi[(df_rcb_mi["toss_winner"]=="Royal Challengers Bangalore")]
print(df_todays_mumbai_toss["toss_decision"].value_counts())
print(df_todays_rcb_toss["toss_decision"].value_counts())

print("now printing MI win & loss count if they have won the toss\n")
print(df_todays_mumbai_toss["winner"].value_counts())
print("\nnow printing rcb win loss & count if they have won the toss\n")
print(df_todays_rcb_toss["winner"].value_counts())

df_field_mi=df_todays_mumbai_toss[(df_todays_mumbai_toss["toss_decision"]=="field")]
print("MI toss win and field\n",df_field_mi["winner"].value_counts())

df_field_mi=df_todays_mumbai_toss[(df_todays_mumbai_toss["toss_decision"]=="bat")]
print("MI toss win and bat\n",df_field_mi["winner"].value_counts())

df_field_mi=df_todays_rcb_toss[(df_todays_rcb_toss["toss_decision"]=="field")]
print("rcb toss win and field\n",df_field_mi["winner"].value_counts())

df_field_mi=df_todays_rcb_toss[(df_todays_rcb_toss["toss_decision"]=="bat")]
print("rcb toss win and bat\n",df_field_mi["winner"].value_counts())